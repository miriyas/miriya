// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String        @id @default(cuid())
  comments  PostComment[] @relation(name: "PostToPostComment")
  title     String
  content   String        @db.Text
  visible   Boolean       @default(true)
  userId    String
  user      User          @relation(name: "PostToUser", fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
}

model User {
  id        String        @id @unique @default(cuid())
  comments  PostComment[] @relation(name: "PostCommentToUser")
  posts     Post[]        @relation(name: "PostToUser")
  uid       String        @unique
  email     String        @unique
  nickname  String        @unique
  password  String?
  role      Role          @default(USER)
  memo      String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model PostComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  postId    String
  post      Post     @relation(name: "PostToPostComment", fields: [postId], references: [id])
  userId    String
  user      User     @relation(name: "PostCommentToUser", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id             String       @id @unique @default(cuid())
  MyCar          MyCar[]      @relation(name: "AuthorToMyCar")
  MyCarFix       MyCarFix[]   @relation(name: "AuthorToMyCarFix")
  MyCarLink      MyCarLink[]  @relation(name: "AuthorToMyCarLink")
  MyCarParts     MyCarParts[] @relation(name: "AuthorToMyCarParts")
  nickname       String?
  nicknameIsFake Boolean?
  profileUrl     String?
}

model MyCar {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt
  deletedAt  DateTime?
  author     Author       @relation(name: "AuthorToMyCar", fields: [authorId], references: [id])
  authorId   String
  imageUrl   String?
  lineup     String
  maker      String
  name       String
  vin        String
  MyCarFix   MyCarFix[]   @relation(name: "MyCarToMyCarFix")
  MyCarLink  MyCarLink[]  @relation(name: "MyCarToMyCarLink")
  MyCarParts MyCarParts[] @relation(name: "MyCarToMyCarParts")
}

model MyCarFix {
  id          String    @id @unique @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  author      Author    @relation(name: "AuthorToMyCarFix", fields: [authorId], references: [id])
  authorId    String
  body        String?
  car         MyCar     @relation(name: "MyCarToMyCarFix", fields: [carId], references: [id])
  carId       String
  km          Int?
  miles       Int?
  location    String?
  locationUrl String?
  time        String
  title       String
}

model MyCarLink {
  id        String    @id @unique @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  author    Author    @relation(name: "AuthorToMyCarLink", fields: [authorId], references: [id])
  authorId  String
  car       MyCar     @relation(name: "MyCarToMyCarLink", fields: [carId], references: [id])
  carId     String
  body      String?
  url       String
  title     String
}

model MyCarParts {
  id        String    @id @unique @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  author    Author    @relation(name: "AuthorToMyCarParts", fields: [authorId], references: [id])
  authorId  String
  car       MyCar     @relation(name: "MyCarToMyCarParts", fields: [carId], references: [id])
  carId     String
  name      String
  body      String
  partsNo   String
  partsUrl  String?
}

enum Role {
  USER
  ADMIN
  SUPPORTER
}
